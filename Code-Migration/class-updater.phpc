<?php

/**
 * Class names updater.
 *
 * This file is part of the Nette Framework (http://nette.org)
 *
 * For the full copyright and license information, please view
 * the file license.txt that was distributed with this source code.
 * @phpversion 5.3
 */

require __DIR__ . '/../../Nette-minified/nette.min.php';


echo '
ClassUpdater version 1.0
------------------------
';

$options = getopt('d:f');

if (!$options) { ?>
Usage: php class-updater.php [options]

Options:
	-d <path>  folder to scan (optional)
	-f         fixes files

<?php
}



class ClassUpdater extends Nette\Object
{
	public $readOnly = FALSE;

	/** @var array */
	private $uses;

	/** @var array */
	private $newUses;

	/** @var string or FALSE in 5.2 mode */
	private $namespace;

	/** @var */
	private $fileName;

	/** @var array */
	private $replaces = array(
		// namespaces
		'Nette\Web' => 'Nette\Http',
		'Nette\Templates' => 'Nette\Templating',

		// php 5.2
		'ArrayTools' => 'Arrays',
		'String' => 'Strings',
		'MultiRouter' => 'RouteList',
		'DummyStorage' => 'DevNullStorage',
		'Debug' => 'Debugger',
		'IDebugPanel' => 'IBarPanel',
		'Uri' => 'Url',
		'UriScript' => 'UrlScript',
		'DownloadResponse' => 'FileResponse',
		'ForwardingResponse' => 'ForwardResponse',
		'RedirectingResponse' => 'RedirectResponse',
		'RenderResponse' => 'TextResponse',
		'PresenterLoader' => 'PresenterFactory',
		'FileUpload' => 'UploadControl',
		'ConventionalRenderer' => 'DefaultFormRenderer',
		'Tools::MINUTE' => 'DateTime53::MINUTE',
		'Tools::HOUR' => 'DateTime53::HOUR',
		'Tools::DAY' => 'DateTime53::DAY',
		'Tools::WEEK' => 'DateTime53::WEEK',
		'Tools::MONTH' => 'DateTime53::MONTH',
		'Tools::YEAR' => 'DateTime53::YEAR',
		'Tools::createDateTime' => 'DateTime53::from',
		'Tools::detectMimeType' => 'MimeTypeDetector::fromFile',
		'Tools::detectMimeTypeFromString' => 'MimeTypeDetector::fromString',

		// alpha / PHP 5.3
		'InvalidStateException' => 'Nette\InvalidStateException',
		'NotImplementedException' => 'Nette\NotImplementedException',
		'NotSupportedException' => 'Nette\NotSupportedException',
		'DeprecatedException' => 'Nette\DeprecatedException',
		'MemberAccessException' => 'Nette\MemberAccessException',
		'FatalErrorException' => 'Nette\FatalErrorException',
		'FileNotFoundException' => 'Nette\FileNotFoundException',
		'DirectoryNotFoundException' => 'Nette\DirectoryNotFoundException',
		'IOException' => 'Nette\IOException',
		'Nette\RegexpException' => 'Nette\Utils\RegexpException',
		'Nette\IComponent' => 'Nette\ComponentModel\IComponent',
		'Nette\Component' => 'Nette\ComponentModel\Component',
		'Nette\IComponentContainer' => 'Nette\ComponentModel\IContainer',
		'Nette\ComponentContainer' => 'Nette\ComponentModel\Container',
		'Nette\AmbiguousServiceException' => 'Nette\DI\AmbiguousServiceException',
		'Nette\IContext' => 'Nette\DI\IContainer',
		'Nette\Context' => 'Nette\DI\Container',
		'Nette\Debug' => 'Nette\Diagnostics\Debugger',
		'Nette\DebugPanel' => 'Nette\Diagnostics\DefaultBarPanel',
		'Nette\IDebugPanel' => 'Nette\Diagnostics\IBarPanel',
		'Nette\DebugHelpers' => 'Nette\Diagnostics\Helpers',
		'Nette\ITranslator' => 'Nette\Localization\ITranslator',
		'Nette\SafeStream' => 'Nette\Utils\SafeStream',
		'Nette\Finder' => 'Nette\Utils\Finder',
		'Nette\ArrayTools' => 'Nette\Utils\Arrays',
		'Nette\Json' => 'Nette\Utils\Json',
		'Nette\JsonException' => 'Nette\Utils\JsonException',
		'Nette\Neon' => 'Nette\Utils\Neon',
		'Nette\NeonException' => 'Nette\Utils\NeonException',
		'Nette\Paginator' => 'Nette\Utils\Paginator',
		'Nette\String' => 'Nette\Utils\Strings',
		'Nette\Tokenizer' => 'Nette\Utils\Tokenizer',
		'Nette\TokenizerException' => 'Nette\Utils\TokenizerException',
		'Nette\CallbackFilterIterator' => 'Nette\Iterators\Filter',
		'Nette\GenericRecursiveIterator' => 'Nette\Iterators\Recursor',
		'Nette\InstanceFilterIterator' => 'Nette\Iterators\InstanceFilter',
		'Nette\MapIterator' => 'Nette\Iterators\Mapper',
		'Nette\RecursiveCallbackFilterIterator' => 'Nette\Iterators\RecursiveFilter',
		'Nette\SmartCachingIterator' => 'Nette\Iterators\CachingIterator',
		'Nette\Application\DownloadResponse' => 'Nette\Application\Responses\FileResponse',
		'Nette\Application\ForwardingResponse' => 'Nette\Application\Responses\ForwardResponse',
		'Nette\Application\JsonResponse' => 'Nette\Application\Responses\JsonResponse',
		'Nette\Application\RedirectingResponse' => 'Nette\Application\Responses\RedirectResponse',
		'Nette\Application\RenderResponse' => 'Nette\Application\Responses\TextResponse',
		'Nette\Application\CliRouter' => 'Nette\Application\Routers\CliRouter',
		'Nette\Application\MultiRouter' => 'Nette\Application\Routers\RouteList',
		'Nette\Application\Route' => 'Nette\Application\Routers\Route',
		'Nette\Application\SimpleRouter' => 'Nette\Application\Routers\SimpleRouter',
		'Nette\Application\RoutingDebugger' => 'Nette\Application\Diagnostics\RoutingPanel',
		'Nette\Application\PresenterRequest' => 'Nette\Application\Request',
		'Nette\Application\IPresenterResponse' => 'Nette\Application\IResponse',
		'Nette\Application\Link' => 'Nette\Application\UI\Link',
		'Nette\Application\IRenderable' => 'Nette\Application\UI\IRenderable',
		'Nette\Application\ISignalReceiver' => 'Nette\Application\UI\ISignalReceiver',
		'Nette\Application\IStatePersistent' => 'Nette\Application\UI\IStatePersistent',
		'Nette\Application\IPartiallyRenderable' => 'Nette\Application\UI\IPartiallyRenderable',
		'Nette\Application\Presenter' => 'Nette\Application\UI\Presenter',
		'Nette\Application\PresenterComponent' => 'Nette\Application\UI\PresenterComponent',
		'Nette\Application\PresenterComponentReflection' => 'Nette\Application\UI\PresenterComponentReflection',
		'Nette\Application\Control' => 'Nette\Application\UI\Control',
		'Nette\Application\AppForm' => 'Nette\Application\UI\Form',
		'Nette\Application\BadSignalException' => 'Nette\Application\UI\BadSignalException',
		'Nette\Application\InvalidLinkException' => 'Nette\Application\UI\InvalidLinkException',
		'Nette\Application\PresenterLoader' => 'Nette\Application\PresenterFactory',
		'Nette\Forms\Button' => 'Nette\Forms\Controls\Button',
		'Nette\Forms\Checkbox' => 'Nette\Forms\Controls\Checkbox',
		'Nette\Forms\FileUpload' => 'Nette\Forms\Controls\UploadControl',
		'Nette\Forms\FormControl' => 'Nette\Forms\Controls\BaseControl',
		'Nette\Forms\HiddenField' => 'Nette\Forms\Controls\HiddenField',
		'Nette\Forms\ImageButton' => 'Nette\Forms\Controls\ImageButton',
		'Nette\Forms\MultiSelectBox' => 'Nette\Forms\Controls\MultiSelectBox',
		'Nette\Forms\RadioList' => 'Nette\Forms\Controls\RadioList',
		'Nette\Forms\SelectBox' => 'Nette\Forms\Controls\SelectBox',
		'Nette\Forms\SubmitButton' => 'Nette\Forms\Controls\SubmitButton',
		'Nette\Forms\TextArea' => 'Nette\Forms\Controls\TextArea',
		'Nette\Forms\TextBase' => 'Nette\Forms\Controls\TextBase',
		'Nette\Forms\TextInput' => 'Nette\Forms\Controls\TextInput',
		'Nette\Forms\FormGroup' => 'Nette\Forms\ControlGroup',
		'Nette\Forms\FormContainer' => 'Nette\Forms\Container',
		'Nette\Forms\IFormControl' => 'Nette\Forms\IControl',
		'Nette\Forms\DefaultFormRenderer' => 'Nette\Forms\Rendering\DefaultFormRenderer',
		'Nette\Forms\ConventionalRenderer' => 'Nette\Forms\Rendering\DefaultFormRenderer',
		'Nette\Caching\ICacheStorage' => 'Nette\Caching\IStorage',
		'Nette\Caching\DummyStorage' => 'Nette\Caching\Storages\DevNullStorage',
		'Nette\Caching\FileJournal' => 'Nette\Caching\Storages\FileJournal',
		'Nette\Caching\FileStorage' => 'Nette\Caching\Storages\FileStorage',
		'Nette\Caching\ICacheJournal' => 'Nette\Caching\Storages\IJournal',
		'Nette\Caching\MemcachedStorage' => 'Nette\Caching\Storages\MemcachedStorage',
		'Nette\Caching\MemoryStorage' => 'Nette\Caching\Storages\MemoryStorage',
		'Nette\Config\ConfigAdapterIni' => 'Nette\Config\IniAdapter',
		'Nette\Config\ConfigAdapterNeon' => 'Nette\Config\NeonAdapter',
		'Nette\Config\IConfigAdapter' => 'Nette\Config\IAdapter',
		'Nette\Database\DatabasePanel' => 'Nette\Database\Diagnostics\ConnectionPanel',
		'Nette\Database\Selector\GroupedTableSelection' => 'Nette\Database\Table\GroupedSelection',
		'Nette\Database\Selector\TableRow' => 'Nette\Database\Table\ActiveRow',
		'Nette\Database\Selector\TableSelection' => 'Nette\Database\Table\Selection',
		'Nette\Loaders\LimitedScope' => 'Nette\Utils\LimitedScope',
		'Nette\Mail\Mail' => 'Nette\Mail\Message',
		'Nette\Mail\MailMimePart' => 'Nette\Mail\MimePart',
		'Nette\Reflection\ClassReflection' => 'Nette\Reflection\ClassType',
		'Nette\Reflection\ExtensionReflection' => 'Nette\Reflection\Extension',
		'Nette\Reflection\FunctionReflection' => 'Nette\Reflection\GlobalFunction',
		'Nette\Reflection\MethodReflection' => 'Nette\Reflection\Method',
		'Nette\Reflection\ParameterReflection' => 'Nette\Reflection\Parameter',
		'Nette\Reflection\PropertyReflection' => 'Nette\Reflection\Property',
		'Nette\Templates\LatteFilter' => 'Nette\Latte\Engine',
		'Nette\Templates\LatteMacros' => 'Nette\Latte\DefaultMacros',
		'Nette\Templates\LatteException' => 'Nette\Latte\ParseException',
		'Nette\Templates\CachingHelper' => 'Nette\Caching\OutputHelper',
		'Nette\Templates\TemplateException' => 'Nette\Templating\FilterException',
		'Nette\Templates\TemplateCacheStorage' => 'Nette\Caching\Storages\PhpFileStorage',
		'Nette\Templates\TemplateHelpers' => 'Nette\Templating\DefaultHelpers',
		'Nette\Templates\FileTemplate' => 'Nette\Templating\FileTemplate',
		'Nette\Templates\IFileTemplate' => 'Nette\Templating\IFileTemplate',
		'Nette\Templates\ITemplate' => 'Nette\Templating\ITemplate',
		'Nette\Templates\Template' => 'Nette\Templating\Template',
		'Nette\Web\Html' => 'Nette\Utils\Html',
		'Nette\Web\HttpContext' => 'Nette\Http\Context',
		'Nette\Web\IHttpRequest' => 'Nette\Http\IRequest',
		'Nette\Web\HttpRequest' => 'Nette\Http\Request',
		'Nette\Web\IHttpResponse' => 'Nette\Http\IResponse',
		'Nette\Web\HttpResponse' => 'Nette\Http\Response',
		'Nette\Web\HttpRequestFactory' => 'Nette\Http\RequestFactory',
		'Nette\Web\HttpUploadedFile' => 'Nette\Http\FileUpload',
		'Nette\Web\ISessionStorage' => 'Nette\Http\ISessionStorage',
		'Nette\Web\Session' => 'Nette\Http\Session',
		'Nette\Web\SessionNamespace' => 'Nette\Http\SessionSection',
		'Nette\Web\Uri' => 'Nette\Http\Url',
		'Nette\Web\UriScript' => 'Nette\Http\UrlScript',
		'Nette\Web\IUser' => 'Nette\Http\IUser',
		'Nette\Web\User' => 'Nette\Http\User',
		'Nette\Tools::MINUTE' => 'Nette\DateTime::MINUTE',
		'Nette\Tools::HOUR' => 'Nette\DateTime::HOUR',
		'Nette\Tools::DAY' => 'Nette\DateTime::DAY',
		'Nette\Tools::WEEK' => 'Nette\DateTime::WEEK',
		'Nette\Tools::MONTH' => 'Nette\DateTime::MONTH',
		'Nette\Tools::YEAR' => 'Nette\DateTime::YEAR',
		'Nette\Tools::createDateTime' => 'Nette\DateTime::from',
		'Nette\Tools::detectMimeType' => 'Nette\Utils\MimeTypeDetector::fromFile',
		'Nette\Tools::detectMimeTypeFromString' => 'Nette\Utils\MimeTypeDetector::fromString',
	);

	/** @var array */
	private $deprecated = array(
		// php 5.2
		'Tools' => FALSE,
		'NeonParser' => FALSE,
		'TemplateFilters' => FALSE,
		'ImageMagick' => FALSE,
		'Debug::$logFile' => FALSE,
		'Debug::$showBar' => FALSE,

		// alpha / PHP 5.3
		'Nette\Tools' => FALSE,
		'Nette\NeonParser' => FALSE,
		'Nette\Templates\TemplateFilters' => FALSE,
		'Nette\ImageMagick' => FALSE,
		'Nette\Debug::$logFile' => FALSE,
		'Nette\Debug::$showBar' => FALSE,

		// members
		'->redirectUri(' => 'redirectUrl()',
		'->getUri(' => 'getUrl()',
		'->uri' => 'url',
		'->getHostUri(' => 'getHostUrl()',
		'->hostUri' => 'hostUrl',
		'->getBaseUri(' => 'getBaseUrl()',
		'->baseUri' => 'baseUrl',
		'->getRelativeUri(' => 'getRelativeUrl()',
		'->relativeUri' => 'relativeUrl',
	);



	public function run($folder)
	{
		set_time_limit(0);

		if ($this->readOnly) {
			echo "Running in read-only mode\n";
		}

		echo "Scanning folder $folder...\n";

		foreach ($this->replaces as $old => $new) {
			if (preg_match('#^(?!I[A-Z])[A-Z][^\\\\]+$#', $old)) {
				$this->replaces["N$old"] = $new;
			}
		}
		$this->replaces = array_change_key_case($this->replaces);
		$this->deprecated = array_change_key_case($this->deprecated);


		$counter = 0;
		foreach (Nette\Utils\Finder::findFiles('*.php')->from($folder)
			->exclude(array('.*', '*.tmp', 'tmp', 'temp', 'log')) as $file)
		{
			echo str_pad(str_repeat('.', $counter++ % 40), 40), "\x0D";

			$this->fileName = ltrim(str_replace($folder, '', $file), '/\\');

			$orig = file_get_contents($file);
			$new = $this->processFile($orig);
			if ($new !== $orig) {
				$this->report($this->readOnly ? 'FOUND' : 'FIX');
				if (!$this->readOnly) {
					file_put_contents($file, $new);
				}
			}
		}

		echo "\nDone.";
	}



	public function report($level, $message = '')
	{
		echo "[$level] $this->fileName   $message\n";
	}



	public function processFile($input)
	{
		$this->namespace = FALSE;
		$this->uses = $this->newUses = array();
		$parser = new PhpParser($input);

		// detect 5.2 or 5.3
		foreach ($parser->tokens as $token) {
			if (is_string($token) && $token['type'] === T_NS_SEPARATOR) {
				$this->namespace = '';
				break;
			}
		}

		while (($token = $parser->fetch()) !== FALSE) {

			if ($parser->isCurrent(T_NAMESPACE)) {
				$this->namespace = (string) $parser->fetchAll(T_STRING, T_NS_SEPARATOR);
				$this->uses = $this->newUses = array();

			} elseif ($parser->isCurrent(T_USE)) {
				if ($parser->isNext('(')) { // closure?
					continue;
				}
				do {
					$parser->fetchAll(T_WHITESPACE, T_COMMENT);

					$pos = $parser->position + 1;
					$class = $newClass = ltrim($parser->fetchAll(T_STRING, T_NS_SEPARATOR), '\\');
					if (isset($this->replaces[strtolower($class)])) {
						$parser->replace($newClass = $this->replaces[strtolower($class)], $pos);
					}

					if ($parser->fetch(T_AS)) {
						$as = $newAs = $parser->fetch(T_STRING);
					} else {
						$as = substr($class, strrpos("\\$class", '\\'));
						$newAs = substr($newClass, strrpos("\\$newClass", '\\'));
					}
					$this->uses[strtolower($as)] = $class;
					while (isset($this->newUses[strtolower($newAs)])) {
						$newAs .= '_';
						$parser->replace("$class as $newAs", $pos);
					}
					$this->newUses[strtolower($newAs)] = array($newClass, $newAs);

				} while ($parser->fetch(','));

			} elseif ($parser->isCurrent(T_INSTANCEOF, T_EXTENDS, T_IMPLEMENTS, T_NEW)) {
				do {
					$parser->fetchAll(T_WHITESPACE, T_COMMENT);
					$pos = $parser->position + 1;
					if ($class = $parser->fetchAll(T_STRING, T_NS_SEPARATOR)) {
						$parser->replace($this->renameClass($class), $pos);
					}
				} while ($class && $parser->fetch(','));

			} elseif ($parser->isCurrent(T_STRING, T_NS_SEPARATOR)) {
				$pos = $parser->position;
				$identifier = $token . $parser->fetchAll(T_STRING, T_NS_SEPARATOR);
				if ($parser->fetch(T_DOUBLE_COLON)) { // Class::
					$member = $parser->fetch(T_STRING, T_VARIABLE);
					$parser->replace($this->renameClass($identifier, $member), $pos);

				} elseif ($parser->isNext(T_VARIABLE)) { // typehint
					$parser->replace($this->renameClass($identifier), $pos);
				}

			} elseif ($parser->isCurrent(T_DOC_COMMENT, T_COMMENT)) {
				// @var Class or \Class or Nm\Class or Class:: (preserves CLASS)
				$that = $this;
				$parser->replace(preg_replace_callback('#((?:@var(?:\s+array of)?|returns?|param|throws|@link|property[\w-]*)\s+)([\w\\\\|]+)#', function($m) use ($that) {
					$parts = array();
					foreach (explode('|', $m[2]) as $part) {
						$parts[] = preg_match('#^\\\\?[A-Z].*[a-z]#', $part) ? $that->renameClass($part) : $part;
					}
					return $m[1] . implode('|', $parts);
				}, $token));

			} elseif ($parser->isCurrent(T_CONSTANT_ENCAPSED_STRING)) {
				if (preg_match('#(^.\\\\?)(Nette(?:\\\\{1,2}[A-Z]\w+)*)(:.*|.$)#', $token, $m)) { // 'Nette\Object'
					$class = str_replace('\\\\', '\\', $m[2], $double);
					if (isset($that->replaces[strtolower($class)])) {
						$class = $that->replaces[strtolower($class)];
 						$parser->replace($m[1] . str_replace('\\', $double ? '\\\\' : '\\', $class) . $m[3]);
					}
				}

			} elseif ($parser->isCurrent(T_OBJECT_OPERATOR)) {
				$pos = $parser->position;
				$member = $parser->fetch(T_STRING);
				$s = strtolower('->' . $member . $parser->fetch('('));
				if (isset($this->deprecated[$s])) {
					$this->report('WARNING', "Found a possible deprecated member $member on line {$parser->tokens[$pos]['line']}"
						. ($this->deprecated[$s] ? "; use {$this->deprecated[$s]} instead" : ''));
				}
			}
		}

		$parser->position = 0;
		return $parser->fetchAll();
	}



	/**
	 * Renames class.
	 * @param  string class
	 * @return string new class
	 */
	function renameClass($class, $member = NULL)
	{
		if ($class === 'parent' || $class === 'self' || !$class) {
			return $class . ($member ? "::$member" : '');
		}

		$class = $this->resolveClass($class);

		if (isset($this->deprecated[strtolower("$class::$member")])) {
			$this->report('ERROR', "Found deprecated '$class::$member'");

		} elseif (isset($this->deprecated[strtolower($class)])) {
			$this->report('ERROR', "Found deprecated class '$class'");

		} elseif (isset($this->replaces[strtolower("$class::$member")])) {
			list($class, $member) = explode('::', $this->replaces[strtolower("$class::$member")]);

		} elseif (isset($this->replaces[strtolower($class)])) {
			$newClass = $this->replaces[strtolower($class)];
			if ($this->namespace !== FALSE || strpos($class, '\\') !== FALSE || strpos($newClass, '\\') === FALSE) {
				$class = $newClass;
			}
		}

		return $this->applyUse($class) . ($member ? "::$member" : '');
	}



	/**
	 * Apply use statements.
	 * @param  string
	 * @return string
	 */
	function applyUse($class)
	{
		$best = strncasecmp($class, "$this->namespace\\", strlen("$this->namespace\\")) === 0
			? substr($class, strlen($this->namespace) + 1)
			: ($this->namespace ? '\\' : '') . $class;

		foreach ($this->newUses as $item) {
			list($use, $as) = $item;
			if (strncasecmp("$class\\", "$use\\", strlen("$use\\")) === 0) {
				$new = substr_replace($class, $as, 0, strlen($use));
				if (strlen($new) <= strlen($best)) {
					$best = $new;
				}
			}
		}

		return $best;
	}



	/**
	 * Resolve use statements.
	 * @param  string
	 * @return string|NULL
	 */
	function resolveClass($class)
	{
		$segment = strtolower(substr($class, 0, strpos("$class\\", '\\')));
		if ($segment === '') {
			$full = $class;
		} elseif (isset($this->uses[$segment])) {
			$full = $this->uses[$segment] . substr($class, strlen($segment));
		} else {
			$full = $this->namespace . '\\' . $class;
		}
		return ltrim($full, '\\');
	}

}



/**
 * Simple tokenizer for PHP.
 */
class PhpParser extends Nette\Utils\Tokenizer
{

	function __construct($code)
	{
		$this->ignored = array(T_COMMENT, T_DOC_COMMENT, T_WHITESPACE);
		foreach (token_get_all($code) as $token) {
			$this->tokens[] = is_array($token) ? self::createToken($token[1], $token[0], $token[2]) : $token;
		}
	}



	function replace($s, $start = NULL)
	{
		for ($i = ($start === NULL ? $this->position : $start) - 1; $i < $this->position - 1; $i++) {
			$this->tokens[$i] = '';
		}
		$this->tokens[$this->position - 1] = $s;
	}

}



$updater = new ClassUpdater;
$updater->readOnly = !isset($options['f']);
$updater->run(isset($options['d']) ? $options['d'] : getcwd());
